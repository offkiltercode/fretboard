{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["noteList","GuitarString","props","className","notes","map","note","onClick","action","App","midiSounds","MIDISounds","cacheInstrument","state","selectedInstrument","this","playChordNow","notesS1","notesS2","notesS3","notesS4","notesS5","notesS6","fretNumbers","FretRow","value","i","length","push","class","e","playNotes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"+RAmBIA,EAAW,CAAC,IAAK,KAAM,IAAK,KAAM,IAAK,IAAK,KAAM,IAAK,KAAM,IAAK,KAAM,KAUtEC,EAAe,SAACC,GAClB,OACI,wBAAIC,UAAU,gBAEND,EAAME,MAAMC,KAAI,SAACC,GACb,OACI,4BACI,4BAAQC,QAAS,kBAAML,EAAMM,OAAOF,KAAQN,EAASM,EAAO,WAuEzEG,E,kDA5DX,WAAYP,GAAQ,IAAD,8BACf,cAAMA,IACDQ,WAAa,IAAIC,IAAW,QACjC,EAAKD,WAAWE,gBAAgB,KAChC,EAAKC,MAAQ,CACTC,mBAAoB,KALT,E,sDASTV,GACNW,KAAKL,WAAWM,aAAaD,KAAKF,MAAMC,mBAAoBV,EAAO,M,+BAkBnE,IAfM,IAAD,OAEDa,EAAU,GACVC,EAAU,GACVC,EAAU,GACVC,EAAU,GACVC,EAAU,GACVC,EAAU,GAEVC,EAAc,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,IAEnEC,EAAUD,EAAYlB,KAAI,SAACoB,GAC7B,OAAO,4BAAe,IAAVA,EAAc,IAAMA,MAG3BC,EAAI,EAAGA,EAAIH,EAAYI,OAAQD,IACpCT,EAAQW,KAtDT,GAsDmBF,GAClBR,EAAQU,KAtDT,GAsDmBF,GAClBP,EAAQS,KAtDT,GAsDmBF,GAClBN,EAAQQ,KAtDT,GAsDmBF,GAClBL,EAAQO,KAtDT,GAsDmBF,GAClBJ,EAAQM,KAtDT,GAsDmBF,GAEtB,OACI,yBAAKvB,UAAU,OACX,2BAAOA,UAAU,aACb,wBAAI0B,MAAM,eACLL,GAEL,kBAAC,EAAD,CAAcpB,MAAOa,EAAST,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,kBAAC,EAAD,CAAc1B,MAAOc,EAASV,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,kBAAC,EAAD,CAAc1B,MAAOe,EAASX,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,kBAAC,EAAD,CAAc1B,MAAOgB,EAASZ,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,kBAAC,EAAD,CAAc1B,MAAOiB,EAASb,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,kBAAC,EAAD,CAAc1B,MAAOkB,EAASd,OAAQ,SAACsB,GAAD,OAAO,EAAKC,UAAU,CAACD,OAC7D,wBAAI3B,UAAU,eACTqB,S,GAnDPQ,aCjCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.8e99d590.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport './App.css';\r\nimport MIDISounds from 'midi-sounds-react';\r\n\r\nconst Octave = 12;\r\n\r\nconst C = 0;\r\nconst Db = 1;\r\nconst D = 2;\r\nconst Eb = 3;\r\nconst E = 4\r\nconst F = 5;\r\nconst Gb = 6;\r\nconst G = 7;\r\nconst Ab = 8;\r\nconst A = 9;\r\nconst Bb = 10;\r\nconst B = 11;\r\n\r\nvar noteList = ['C', 'Db', 'D', 'Eb', 'E', 'F', 'Gb', 'G', 'Ab', 'A', 'Bb', 'B'];\r\n\r\n// Set up the open string notes\r\nconst S1 = 5 * Octave + E;\r\nconst S2 = 4 * Octave + B;\r\nconst S3 = 4 * Octave + G;\r\nconst S4 = 4 * Octave + D;\r\nconst S5 = 3 * Octave + A;\r\nconst S6 = 3 * Octave + E;\r\n\r\nconst GuitarString = (props) => {\r\n    return (\r\n        <tr className=\"guitarString\">\r\n            {\r\n                props.notes.map((note) => {\r\n                    return (\r\n                        <td>\r\n                            <button onClick={() => props.action(note)}>{noteList[note % 12]}</button>\r\n                        </td>\r\n                    );\r\n                })\r\n            }\r\n        </tr>\r\n    )\r\n}\r\n\r\nclass App extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.midiSounds = new MIDISounds(\"root\");\r\n        this.midiSounds.cacheInstrument(260); //steel guitar\r\n        this.state = {\r\n            selectedInstrument: 260\r\n        };\r\n    }\r\n\r\n    playNotes(notes) {\r\n        this.midiSounds.playChordNow(this.state.selectedInstrument, notes, 0.5);\r\n    }\r\n\r\n    render() {\r\n        \r\n        var notesS1 = [];\r\n        var notesS2 = [];\r\n        var notesS3 = [];\r\n        var notesS4 = [];\r\n        var notesS5 = [];\r\n        var notesS6 = [];\r\n\r\n        var fretNumbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16];\r\n\r\n        const FretRow = fretNumbers.map((value) => {\r\n            return <td>{value === 0 ? \" \" : value}</td>\r\n        });\r\n\r\n        for (let i = 0; i < fretNumbers.length; i++) {\r\n            notesS1.push(S1 + i);\r\n            notesS2.push(S2 + i);\r\n            notesS3.push(S3 + i);\r\n            notesS4.push(S4 + i);\r\n            notesS5.push(S5 + i);\r\n            notesS6.push(S6 + i);\r\n        }\r\n        return (\r\n            <div className=\"App\">\r\n                <table className=\"fretboard\">\r\n                    <tr class=\"fretNumbers\">\r\n                        {FretRow}\r\n                    </tr>\r\n                    <GuitarString notes={notesS1} action={(e) => this.playNotes([e])} />\r\n                    <GuitarString notes={notesS2} action={(e) => this.playNotes([e])} />\r\n                    <GuitarString notes={notesS3} action={(e) => this.playNotes([e])} />\r\n                    <GuitarString notes={notesS4} action={(e) => this.playNotes([e])} />\r\n                    <GuitarString notes={notesS5} action={(e) => this.playNotes([e])} />\r\n                    <GuitarString notes={notesS6} action={(e) => this.playNotes([e])} />\r\n                    <tr className=\"fretNumbers\">\r\n                        {FretRow}\r\n                    </tr>\r\n                </table>\r\n                \r\n                \r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}